#include <iostream>
#include <stack>
#include <algorithm>

using namespace std;

// Function to check if a character is an operator
bool isOperator(char c)
{
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
        return true;
    }
    else {
        return false;
    }
}

// Function to determine the precedence of an operator
int precedence(char c)
{
    if (c == '^')
        return 3;
    else if (c == '*' || c == '/')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}

// Function to convert infix expression to prefix expression
string InfixToPrefix(stack<char> s, string infix)
{
    string prefix;

    // Reverse the infix expression
    reverse(infix.begin(), infix.end());

    // Swap opening and closing parentheses for reversal
    for (int i = 0; i < infix.length(); i++) {
        if (infix[i] == '(') {
            infix[i] = ')';
        }
        else if (infix[i] == ')') {
            infix[i] = '(';
        }
    }

    for (int i = 0; i < infix.length(); i++) {
        if ((infix[i] >= 'a' && infix[i] <= 'z') || (infix[i] >= 'A' && infix[i] <= 'Z')) {
            // If the character is an operand, add it to the prefix expression
            prefix += infix[i];
        }
        else if (infix[i] == '(') {
            // If the character is an opening parenthesis, push it onto the stack
            s.push(infix[i]);
        }
        else if (infix[i] == ')') {
            // If the character is a closing parenthesis, pop and add operators from the stack to the prefix expression until an opening parenthesis is encountered
            while ((s.top() != '(') && (!s.empty())) {
                prefix += s.top();
                s.pop();
            }

            if (s.top() == '(') {
                // Pop the opening parenthesis from the stack
                s.pop();
            }
        }
        else if (isOperator(infix[i])) {
            // If the character is an operator
            if (s.empty()) {
                // If the stack is empty, push the operator onto the stack
                s.push(infix[i]);
            }
            else {
                if (precedence(infix[i]) > precedence(s.top())) {
                    // If the operator has higher precedence than the top of the stack, push it onto the stack
                    s.push(infix[i]);
                }
                else if ((precedence(infix[i]) == precedence(s.top())) && (infix[i] == '^')) {
                    // If the operator is '^' and has equal precedence to the top of the stack, push it onto the stack
                    while ((precedence(infix[i]) == precedence(s.top())) && (infix[i] == '^')) {
                        prefix += s.top();
                        s.pop();
                    }
                    s.push(infix[i]);
                }
                else if (precedence(infix[i]) == precedence(s.top())) {
                    // If the operator has equal precedence to the top of the stack, push it onto the stack
                    s.push(infix[i]);
                }
                else {
                    // Pop and add operators from the stack to the prefix expression until the stack is empty or the top has lower precedence
                    while ((!s.empty()) && (precedence(infix[i]) < precedence(s.top()))) {
                        prefix += s.top();
                        s.pop();
                    }
                    // Push the current operator onto the stack
                    s.push(infix[i]);
                }
            }
        }
    }

    // Pop and add any remaining operators from the stack to the prefix expression
    while (!s.empty()) {
        prefix += s.top();
        s.pop();
    }

    // Reverse the prefix expression to get the final result
    reverse(prefix.begin(), prefix.end());

    return prefix;
}

int main()
{
    string infix, prefix;
    cout << "Enter an Infix Expression :" << endl;
    cin >> infix;
    stack<char> stack;
    cout << "INFIX EXPRESSION: " << infix << endl;
    prefix = InfixToPrefix(stack, infix);
    cout << endl << "PREFIX EXPRESSION: " << prefix;

    return 0;
}
